package full.house;

import java.awt.Color;
import java.sql.*;
import java.util.Calendar;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Quinten
 */
public class AddMasterclass extends javax.swing.JFrame {

    MasterclassView parent;
    private int docent;
    private int minimumRating;
    private double prijs;
    private String naam;
    private Date datum;
    private int locatieID;

    public AddMasterclass(MasterclassView parent) {
        this.parent = parent;
        initComponents();
        fillLocatieCB();
        fillDocentCB();
        fillDatumCB();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        minRatingField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        naamField = new javax.swing.JTextField();
        locatieComboBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        dagComboBox = new javax.swing.JComboBox();
        maandComboBox = new javax.swing.JComboBox();
        jaarComboBox = new javax.swing.JComboBox();
        prijsField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        docentCB = new javax.swing.JComboBox();
        warningLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Voeg masterclass toe");

        jLabel2.setText("Naam docent:");

        jLabel3.setText("Minimum rating:");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonMouseClicked(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonMouseClicked(evt);
            }
        });

        jLabel4.setText("Naam:");

        jLabel5.setText("Locatie:");

        jLabel6.setText("Datum:");

        dagComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        maandComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december" }));

        jLabel7.setText("Prijs:");

        warningLbl.setForeground(new java.awt.Color(240, 240, 240));
        warningLbl.setText("jLabel8");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dagComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(maandComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jaarComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(naamField, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(locatieComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(20, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(minRatingField, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(docentCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(prijsField, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(warningLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(27, 27, 27)
                                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(naamField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locatieComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(dagComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maandComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jaarComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(docentCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(minRatingField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prijsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(warningLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(cancelButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Voegt een masterclass toe.
     * @param evt 
     */
    private void addButtonMouseClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonMouseClicked
        if (getValues()) {
            if (addMasterclass()) {
                this.setVisible(false);
                this.dispose();
            }
        }
    }//GEN-LAST:event_addButtonMouseClicked

    /**
     * Sluit scherm af.
     * @param evt 
     */
    private void cancelButtonMouseClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonMouseClicked
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_cancelButtonMouseClicked

    /**
     * Voegt een Masterclass toe in de database.
     * @return returns true wanneer de masterclass is toegevoegd.
     */
    private boolean addMasterclass() {
        String query = "INSERT INTO Evenement(LocatieID, datum, prijs, naam)"
                + "VALUES(?, ?, ?, ?)";
        String query2 = "SELECT EvenementID FROM Evenement"
                + " WHERE locatieID = ? AND datum = ? AND naam = ?";
        String query3 = "INSERT INTO MasterClass(evenementID, docent, minimumRating)"
                + "VALUES(?,?,?);";
        boolean succes = false;
        try {
            Connection conn = SimpleDataSource.getConnection();
            PreparedStatement stat = conn.prepareStatement(query);
            PreparedStatement stat2 = conn.prepareStatement(query2);
            PreparedStatement stat3 = conn.prepareStatement(query3);

            

            stat.setInt(1, locatieID);
            stat.setDate(2, datum);
            stat.setDouble(3, prijs);
            stat.setString(4, naam);

            stat2.setInt(1, locatieID);
            stat2.setDate(2, datum);
            stat2.setString(3, naam);

            if (!checkDate(locatieID, datum)) {
                int confirm = JOptionPane.showConfirmDialog(this, "<html>Er is op deze datum al een "
                        + "evenement op deze locatie.<br>Weet u zeker dat u een masterclass wilt aanmaken?</html>",
                        "Locatie bezet", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    stat.executeUpdate();

                    ResultSet result = stat2.executeQuery();
                    int evenementID = getEvenementID(result);

                    if(evenementID > 0){
                        stat3.setInt(1, evenementID);
                        stat3.setInt(2, docent);
                        stat3.setInt(3, minimumRating);
                        stat3.executeUpdate();
                    }
                    parent.getMasterclasses();
                    result.close();
                    succes = true;
                }
            }
            else {
                stat.executeUpdate();

                ResultSet result = stat2.executeQuery();
                int evenementID = getEvenementID(result);

                if(evenementID > 0){
                    stat3.setInt(1, evenementID);
                    stat3.setInt(2, docent);
                    stat3.setInt(3, minimumRating);
                    stat3.executeUpdate();
                }
                
                parent.getMasterclasses();
                result.close();
                
                succes = true;
            }
            
            stat.close();
            stat2.close();
            stat3.close();
        }
        catch (SQLException e) {
            FullHouse.showDBError(e);
        }
        
        return succes;
    }

    /**
     * Vult de locatie combobox.
     */
    private void fillLocatieCB() {
        String query = "SELECT LocatieID, naam FROM Locatie";
        try {
            Connection conn = SimpleDataSource.getConnection();
            PreparedStatement stat = conn.prepareStatement(query);
            ResultSet result = stat.executeQuery();
            fillBox(locatieComboBox, result, 1, new int[] {2});

            result.close();
            stat.close();

        } catch (SQLException e) {
            FullHouse.showDBError(e);
        }
    }
    
    /**
     * Vult de docent combobox.
     */
    private void fillDocentCB() {
        String query = "SELECT spelerID, naam, voorletters FROM Speler WHERE isDocent = ? ORDER BY naam;";
        try {
            Connection conn = SimpleDataSource.getConnection();
            PreparedStatement stat = conn.prepareStatement(query);
            stat.setBoolean(1, true);
            ResultSet result = stat.executeQuery();
            fillBox(docentCB, result, 1, new int[] {2, 3});
            
            result.close();
            stat.close();
        }
        catch (Exception e) {
            FullHouse.showDBError(e);
        }
    }
    
    /**
     * Vult de datum combobox.
     */
    private void fillDatumCB () {
        int currentYear = Calendar.getInstance().get(Calendar.YEAR);
        for (int i = 0; i < 10; i++) {
            int year = currentYear + i;
            jaarComboBox.addItem(year);
        }
    }

    /**
     * Voegt id en beschrijving toe aan combobox.
     * @param box
     * @param result
     * @param idColumn
     * @param desColumn
     * @throws SQLException 
     */
    private void fillBox (JComboBox box, ResultSet result, int idColumn, int[] desColumn) throws SQLException {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        ModelItem item1 = new ModelItem(-1, "Selecteer");
        model.addElement(item1);
        while (result.next()) {
            int id = result.getInt(idColumn);
            String beschrijving = "";
            for (int i = 0; i < desColumn.length; i++) {
                beschrijving = beschrijving + result.getString(desColumn[i]) + " ";
            }
            ModelItem item = new ModelItem(id, beschrijving);
            model.addElement(item);
        }
        box.setModel(model);
    }
    
    /**
     * Haalt gegevens op uit de invoervelden.
     * Controleert of de invoer correct is.
     * @return returns true wanneer alles correct ingevoerd is.
     */
    private boolean getValues () {
        naam = naamField.getText();
        ModelItem item = (ModelItem) locatieComboBox.getSelectedItem();
        locatieID = item.id;
        if (locatieID == -1) {
            warningLbl.setText("Selecteer een locatie");
            warningLbl.setForeground(Color.red);
            return false;
        }
        item = (ModelItem) docentCB.getSelectedItem();
        docent = item.id;
        if (docent == -1) {
            warningLbl.setText("Selecteer een docent");
            warningLbl.setForeground(Color.red);
            return false;
        }
        datum = getDatum();
        if (datum.before(new Date(System.currentTimeMillis()))) {
            warningLbl.setText("<html>Datum ligt in het verleden.<br>Selecteer een andere datum</html>");
            warningLbl.setForeground(Color.red);
            return false;
        }
        if (naam.length() < 2) {
            warningLbl.setText("Naam moet minimaal twee karakters bevatten");
            warningLbl.setForeground(Color.red);
            return false;
        }
        
        try {
            minimumRating = Integer.parseInt(minRatingField.getText());
            prijs = Double.parseDouble(prijsField.getText());
        }
        catch (Exception e) {
            warningLbl.setText("Controleer rating en prijs");
            warningLbl.setForeground(Color.red);
            return false;
        }
        
        return true;
    }

    /**
     * Haalt datum op.
     * @return returns de datum.
     */
    private Date getDatum() {
        int dag = Integer.parseInt((String) dagComboBox.getSelectedItem());
        int maand = maandComboBox.getSelectedIndex() + 1;
        int jaar = (int) jaarComboBox.getSelectedItem();
        return Date.valueOf(jaar + "-" + maand + "-" + dag);
    }

    /**
     * Controleert of er op een locatie een evenement is met de zelfde datum.
     * @param locatieID
     * @param datum
     * @return returns true wanneer er geen evenement is met de zelfde locatie en datum, als een ander evenement.
     * @throws SQLException 
     */
    private boolean checkDate(int locatieID, Date datum) throws SQLException {
        String query = "SELECT * FROM Evenement WHERE locatieID = ? AND datum = ?";
        Connection conn = SimpleDataSource.getConnection();
        PreparedStatement stat = conn.prepareStatement(query);
        
        stat.setInt(1, locatieID);
        stat.setDate(2, datum);
        
        ResultSet result = stat.executeQuery();
        if (!result.next()) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Haalt evenementID op.
     * @param result
     * @return returns evenementID.
     * @throws SQLException 
     */
    private int getEvenementID(ResultSet result) throws SQLException {
        if (result.first()) {
            return result.getInt("evenementID");
        } else {
            return -1;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox dagComboBox;
    private javax.swing.JComboBox docentCB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JComboBox jaarComboBox;
    private javax.swing.JComboBox locatieComboBox;
    private javax.swing.JComboBox maandComboBox;
    private javax.swing.JTextField minRatingField;
    private javax.swing.JTextField naamField;
    private javax.swing.JTextField prijsField;
    private javax.swing.JLabel warningLbl;
    // End of variables declaration//GEN-END:variables
}
