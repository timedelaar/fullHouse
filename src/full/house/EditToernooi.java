/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package full.house;

import java.awt.Color;
import java.sql.*;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;


/**
 *
 * @author Tim
 */
public class EditToernooi extends javax.swing.JFrame {

    ToernooiView parent;
    int toernooiID;
    String naam;
    int minSpelers;
    int maxSpelers;
    int prijs;
    int locatieID;
    Date datum;
    int soort;
    
    
    /**
     * genereert een nieuwe JFrameForm 
     * EditToernooi met ToernooiView als de parent
     */
    public EditToernooi(ToernooiView parent, int toernooiID) {
        initComponents();
        this.parent = parent;
        this.toernooiID = toernooiID;
        fillFields();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addUserLbl = new javax.swing.JLabel();
        idLbl = new javax.swing.JLabel();
        naamLbl = new javax.swing.JLabel();
        voorlettersLbl = new javax.swing.JLabel();
        postcodeLbl = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        prijsField = new javax.swing.JTextField();
        saveBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        dayBox = new javax.swing.JComboBox();
        monthBox = new javax.swing.JComboBox();
        yearBox = new javax.swing.JComboBox();
        locatieCB = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        maxSpelersField = new javax.swing.JTextField();
        minSpelersField = new javax.swing.JTextField();
        soortCB = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        naamField = new javax.swing.JTextField();
        warningLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Bewerk toernooi");

        addUserLbl.setText("Bewerk toernooi gegevens");

        idLbl.setText("toernooi ID:");

        naamLbl.setText("locatie:");

        voorlettersLbl.setText("datum:");

        postcodeLbl.setText("inleg:");

        idField.setEditable(false);

        saveBtn.setText("Save");
        saveBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveBtnMouseClicked(evt);
            }
        });

        cancelBtn.setText("Cancel");
        cancelBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelBtnMouseClicked(evt);
            }
        });

        dayBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        monthBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "januari", "februari", "maart", "april", "mei", "juni", "juli", "augustus", "september", "oktober", "november", "december" }));

        yearBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2014", "2015", "2016", "2017", "2018", "2019", "2020" }));

        jLabel1.setText("max. spelers:");

        jLabel2.setText("min. spelers:");

        jLabel3.setText("soort:");

        jLabel4.setText("naam:");

        warningLbl.setForeground(new java.awt.Color(240, 240, 240));
        warningLbl.setText("jLabel5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(warningLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(addUserLbl)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(voorlettersLbl)
                                .addComponent(naamLbl)
                                .addComponent(idLbl)
                                .addComponent(postcodeLbl)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4))
                            .addGap(50, 50, 50)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(prijsField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(locatieCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(soortCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(minSpelersField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                                    .addComponent(maxSpelersField, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(naamField, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(dayBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(monthBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(yearBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addUserLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idLbl)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(naamField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(naamLbl)
                    .addComponent(locatieCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(voorlettersLbl)
                    .addComponent(dayBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(monthBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(yearBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prijsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(postcodeLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(maxSpelersField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(minSpelersField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(soortCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(warningLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveBtn)
                    .addComponent(cancelBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /*
     * als getValues() en editToernooi() allebei true zijn
     * worden veranderingen doorgevoerd en het scherm gesloten
     */
    private void saveBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveBtnMouseClicked
        if (getValues()) {
            if (editToernooi()) {
                this.setVisible(false);
                this.dispose();
            }
        }
    }//GEN-LAST:event_saveBtnMouseClicked
    /*
     * Sluit het scherm zonder veranderingen door te voeren
     */
    private void cancelBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelBtnMouseClicked
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_cancelBtnMouseClicked
    /*
     * query om de toernooi en evenement table aan te passen
     * als de gebruiker er zelf voor kiest een dubbel evenement te maken
     * op dezelfde locatie/datum of als er nog geen toernooi is
     * returned succes = true anders returned succes = false
     */
    private boolean editToernooi () {
        boolean succes = false;
        String query = "UPDATE Toernooi SET maximumSpelers = ?, minimumSpelers = ?, soortToernooi = ? "
                + "WHERE evenementID = ?;";
        String query2 = "UPDATE Evenement SET locatieID = ?, datum = ?, prijs = ?, naam = ? "
                + "WHERE evenementID = ?;";
        try {
            Connection conn = SimpleDataSource.getConnection();
            PreparedStatement stat = conn.prepareStatement(query);
            PreparedStatement stat2 = conn.prepareStatement(query2);

            stat.setInt(1, maxSpelers);
            stat.setInt(2, minSpelers);
            stat.setInt(3, soort);
            stat.setInt(4, toernooiID);

            stat2.setInt(1, locatieID);
            stat2.setDate(2, datum);
            stat2.setDouble(3, prijs);
            stat2.setString(4, naam);
            stat2.setInt(5, toernooiID);

            if (!checkDate(locatieID, datum)) {
                int confirm = JOptionPane.showConfirmDialog(this, "<html>Er is op deze datum al een "
                        + "evenement op deze locatie.<br>Weet u zeker dat u een toernooi wilt inplannen?</html>",
                        "Locatie bezet", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    stat.executeUpdate();
                    stat2.executeUpdate();
                    succes = true;
                }
            }
            else {
                stat.executeUpdate();
                stat2.executeUpdate();
                succes = true;
            }

            stat.close();
            stat2.close();
            parent.getToernooien();
        }
        catch (SQLException e) {
            FullHouse.showDBError(e);
        }
        return succes;
    }
    /*
     * haalt de informatie uit de tables op en vult de velden
     * zodat deze aangepast kunnen worden
     */
    private void fillFields() {
        String query = "SELECT * FROM Evenement "
                + "JOIN Toernooi ON Evenement.evenementID = Toernooi.evenementID "
                + "WHERE Evenement.evenementID = ?";
        try {
            Connection conn = SimpleDataSource.getConnection();
            PreparedStatement stat = conn.prepareStatement(query);
            stat.setInt(1, toernooiID);
            
            ResultSet result = stat.executeQuery();
            result.next();
            
            idField.setText(result.getString("evenementID"));
            naamField.setText(result.getString("naam"));
            
            String date = result.getString("datum");
            String day = date.substring(8);
            int month = Integer.parseInt(date.substring(5, 7));
            String year = date.substring(0, 4);
            dayBox.setSelectedItem(day);
            monthBox.setSelectedIndex(month-1);
            yearBox.setSelectedItem(year);

            prijsField.setText(result.getString("prijs"));
            maxSpelersField.setText(result.getString("maximumSpelers"));
            minSpelersField.setText(result.getString("minimumSpelers"));
            
            fillSoortBox(result.getInt("soortToernooi"));
            fillLocatieBox(result.getInt("locatieID"));
        }
        catch (SQLException e) {
            FullHouse.showDBError(e);
        }
    }
    /*
     * vult alle de locatieComboBox met alle locaties
     * selecteerd vervolgens de huidige locatie uit de database
     */
    private void fillLocatieBox (int locatieID) {
        String query = "SELECT locatieID, naam FROM Locatie;";
        ModelItem current = null;
        try {
            Connection conn = SimpleDataSource.getConnection();
            PreparedStatement stat = conn.prepareStatement(query);
            ResultSet result = stat.executeQuery();
            
            DefaultComboBoxModel model = new DefaultComboBoxModel();
            ModelItem item1 = new ModelItem(-1, "Selecteer");
            model.addElement(item1);
            while (result.next()) {
                int id = result.getInt(1);
                String beschrijving = result.getString(2);
                ModelItem item = new ModelItem(id, beschrijving);
                model.addElement(item);
                if (id == locatieID) {
                    current = item;
                }
            }
            locatieCB.setModel(model);
            locatieCB.setSelectedItem(current);
            
            result.close();
            stat.close();
        }
        catch (Exception e) {
            FullHouse.showDBError(e);
        }
    }
    /*
     * vult de soortComboBox met alle evenementsoorten
     * selecteerd vervolgens de huidig geselecteerde soort uit de database
     */
    private void fillSoortBox (int soort) {
        String query = "SELECT soortID, beschrijving FROM ToernooiSoort;";
        ModelItem current = null;
        try {
            Connection conn = SimpleDataSource.getConnection();
            PreparedStatement stat = conn.prepareStatement(query);
            ResultSet result = stat.executeQuery();
            
            DefaultComboBoxModel model = new DefaultComboBoxModel();
            ModelItem item1 = new ModelItem(-1, "Selecteer");
            model.addElement(item1);
            while (result.next()) {
                int id = result.getInt(1);
                String beschrijving = result.getString(2);
                ModelItem item = new ModelItem(id, beschrijving);
                model.addElement(item);
                if (id == soort) {
                    current = item;
                }
            }
            soortCB.setModel(model);
            soortCB.setSelectedItem(current);
            
            result.close();
            stat.close();
        }
        catch (Exception e) {
            FullHouse.showDBError(e);
        }
    }
    /*
     * checkt of de ingevoerde waarden correct zijn
     */
    private boolean getValues () {
        naam = naamField.getText();
        if (naam.length() < 4) {
            warningLbl.setText("Naam moet minimaal 4 karakters zijn");
            warningLbl.setForeground(Color.red);
            return false;
        }
        try {
            minSpelers = Integer.parseInt(minSpelersField.getText());
            maxSpelers = Integer.parseInt(maxSpelersField.getText());
            prijs = Integer.parseInt(prijsField.getText());
        }
        catch (Exception e) {
            return false;
        }
        if (minSpelers > maxSpelers) {
            warningLbl.setText("<html>Minimum aantal spelers kan niet groter<br>zijn dan het maximum aantal spelers</html>");
            warningLbl.setForeground(Color.red);
            return false;
        }
        ModelItem item = (ModelItem) locatieCB.getSelectedItem();
        locatieID = item.id;
        if (locatieID == -1) {
            warningLbl.setText("Selecteer een locatie");
            warningLbl.setForeground(Color.red);
            return false;
        }
        int locatieCapaciteit = getCapaciteit(locatieID);
        if (maxSpelers > locatieCapaciteit) {
            warningLbl.setText("<html>Geselecteerde locatie is te klein.<br>Maximaal " + locatieCapaciteit + " spelers</html>");
            warningLbl.setForeground(Color.red);
            return false;
        }
        datum = getDatum();
        if (datum.before(new Date(System.currentTimeMillis()))) {
            warningLbl.setText("Geselecteerde datum is al geweest");
            warningLbl.setForeground(Color.red);
            return false;
        }
        item = (ModelItem) soortCB.getSelectedItem();
        soort = item.id;
        if (soort == -1) {
            warningLbl.setText("Selecteer een toernooi soort");
            warningLbl.setForeground(Color.red);
            return false;
        }
        return true;
    }
    /*
     * Veranderd de geselecteerde waarden uit de datum comboBoxen 
     * in een Date formaat geschikt voor de database
     */
    private Date getDatum () {
        int day = Integer.parseInt((String) dayBox.getSelectedItem());
        int month = monthBox.getSelectedIndex()+1;
        int year = Integer.parseInt((String) yearBox.getSelectedItem());
        return Date.valueOf(year + "-" + month + "-" + day);
    }
    /* 
     * Checkt of er niet al een evenement is op dezelfde datum en locatie
     */
    private boolean checkDate(int locatieID, Date datum) throws SQLException {
        String query = "SELECT * FROM Evenement WHERE locatieID = ? AND datum = ?";
        Connection conn = SimpleDataSource.getConnection();
        PreparedStatement stat = conn.prepareStatement(query);
        
        stat.setInt(1, locatieID);
        stat.setDate(2, datum);
        
        ResultSet result = stat.executeQuery();
        if (!result.next()) {
            return true;
        } else {
            return false;
        }
    }
    /*
     * Haalt de capiciteit van de geselecteerde locatie uit de database
     */
    private int getCapaciteit (int locatie) {
        String query = "SELECT aantalTafels, spelersPerTafel FROM Locatie WHERE locatieID = ?;";
        try {
            Connection conn = SimpleDataSource.getConnection();
            PreparedStatement stat = conn.prepareStatement(query);
            
            stat.setInt(1, locatie);
            ResultSet result = stat.executeQuery();
            
            if (result.next()) {
                return result.getInt("aantalTafels") * result.getInt("spelersPerTafel");
            }
            else {
                return -1;
            }
        }
        catch (Exception e) {
            FullHouse.showDBError(e);
            return -1;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addUserLbl;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JComboBox dayBox;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel idLbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JComboBox locatieCB;
    private javax.swing.JTextField maxSpelersField;
    private javax.swing.JTextField minSpelersField;
    private javax.swing.JComboBox monthBox;
    private javax.swing.JTextField naamField;
    private javax.swing.JLabel naamLbl;
    private javax.swing.JLabel postcodeLbl;
    private javax.swing.JTextField prijsField;
    private javax.swing.JButton saveBtn;
    private javax.swing.JComboBox soortCB;
    private javax.swing.JLabel voorlettersLbl;
    private javax.swing.JLabel warningLbl;
    private javax.swing.JComboBox yearBox;
    // End of variables declaration//GEN-END:variables
}
