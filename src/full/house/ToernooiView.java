/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package full.house;

import java.sql.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Tim
 */
public class ToernooiView extends javax.swing.JPanel {

    /**
     * Creates new form SpelerView
     */
    public ToernooiView () {
        initComponents();
        getToernooien();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        toernooiTable = new javax.swing.JTable();
        addToernooiBtn = new javax.swing.JButton();
        editToernooiBtn = new javax.swing.JButton();
        deleteToernooiBtn = new javax.swing.JButton();
        viewInschrijvingenBtn = new javax.swing.JButton();
        tafelBtn = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(800, 600));

        toernooiTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Locatie", "Datum", "Inschrijvingen", "Max", "Inleg", "Spelers per tafel", "Totaal inleg"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        toernooiTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(toernooiTable);
        if (toernooiTable.getColumnModel().getColumnCount() > 0) {
            toernooiTable.getColumnModel().getColumn(0).setResizable(false);
            toernooiTable.getColumnModel().getColumn(0).setPreferredWidth(25);
            toernooiTable.getColumnModel().getColumn(1).setMinWidth(40);
            toernooiTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            toernooiTable.getColumnModel().getColumn(1).setMaxWidth(150);
            toernooiTable.getColumnModel().getColumn(2).setMinWidth(30);
            toernooiTable.getColumnModel().getColumn(2).setPreferredWidth(65);
            toernooiTable.getColumnModel().getColumn(2).setMaxWidth(70);
            toernooiTable.getColumnModel().getColumn(3).setMinWidth(30);
            toernooiTable.getColumnModel().getColumn(3).setPreferredWidth(100);
            toernooiTable.getColumnModel().getColumn(3).setMaxWidth(120);
            toernooiTable.getColumnModel().getColumn(4).setMinWidth(40);
            toernooiTable.getColumnModel().getColumn(4).setPreferredWidth(50);
            toernooiTable.getColumnModel().getColumn(4).setMaxWidth(60);
            toernooiTable.getColumnModel().getColumn(5).setResizable(false);
            toernooiTable.getColumnModel().getColumn(5).setPreferredWidth(60);
            toernooiTable.getColumnModel().getColumn(6).setMinWidth(30);
            toernooiTable.getColumnModel().getColumn(6).setPreferredWidth(90);
            toernooiTable.getColumnModel().getColumn(6).setMaxWidth(100);
            toernooiTable.getColumnModel().getColumn(7).setMinWidth(30);
            toernooiTable.getColumnModel().getColumn(7).setPreferredWidth(100);
            toernooiTable.getColumnModel().getColumn(7).setMaxWidth(200);
        }

        addToernooiBtn.setText("<html><div align=center>Nieuw<br>toernooi</div></html>");
        addToernooiBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addToernooiBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addToernooiBtnMouseClicked(evt);
            }
        });

        editToernooiBtn.setText("<html><div align=center>Bewerk<br>toernooi</div></html>");
        editToernooiBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editToernooiBtnMouseClicked(evt);
            }
        });

        deleteToernooiBtn.setText("<html><div align=center>Verwijder<br>toernooi</div></html>");
        deleteToernooiBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteToernooiBtnMouseClicked(evt);
            }
        });

        viewInschrijvingenBtn.setText("<html><div align=center>Bekijk<br>inschrijvingen</div></html>");
        viewInschrijvingenBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewInschrijvingenBtnMouseClicked(evt);
            }
        });

        tafelBtn.setText("<html><div align=center>Maak<br>tafelindeling</div></html>");
        tafelBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tafelBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addToernooiBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                    .addComponent(viewInschrijvingenBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                    .addComponent(deleteToernooiBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                    .addComponent(editToernooiBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                    .addComponent(tafelBtn))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addToernooiBtn, deleteToernooiBtn, editToernooiBtn, tafelBtn, viewInschrijvingenBtn});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addToernooiBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editToernooiBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteToernooiBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(viewInschrijvingenBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tafelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addToernooiBtn, deleteToernooiBtn, editToernooiBtn, tafelBtn, viewInschrijvingenBtn});

    }// </editor-fold>//GEN-END:initComponents

    /**
     * Opent dialog voor het toevoegen van een geselecteerd toernooi.
     * @param evt 
     */
    private void addToernooiBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addToernooiBtnMouseClicked
        AddToernooi addToernooi = new AddToernooi(this);
        addToernooi.setLocation(300, 150);
        addToernooi.setVisible(true);
    }//GEN-LAST:event_addToernooiBtnMouseClicked

    /**
     * Opent dialog voor het bewerken van een geselecteerd toernooi.
     * @param evt 
     */
    private void editToernooiBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editToernooiBtnMouseClicked
        int[] row = toernooiTable.getSelectedRows();
        if (row.length == 0) {
            JOptionPane.showMessageDialog(this, "Geen toernooi(en) geselecteerd.", "Bewerk toernooi", JOptionPane.PLAIN_MESSAGE);
        } else {
            for (int i = 0; i < row.length; i++) {
                int toernooiID = Integer.parseInt(toernooiTable.getValueAt(row[i], 0).toString());
                EditToernooi editToernooi = new EditToernooi(this, toernooiID);
                editToernooi.setLocation(200 + i*30, 150 + i*30 - (i/5)*150);
                editToernooi.setVisible(true);
            }
        }
    }//GEN-LAST:event_editToernooiBtnMouseClicked

    /**
     * Verwijdert geselecteerd toernooi.
     * @param evt 
     */
    private void deleteToernooiBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteToernooiBtnMouseClicked
        int confirm = JOptionPane.showConfirmDialog(null, "Weet u zeker dat u dit toernooi wilt verwijderen?", "Verwijder toernooi?", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            int[] rows = toernooiTable.getSelectedRows();
            for (int i = 0; i < rows.length; i++) {
                int id = Integer.parseInt(toernooiTable.getValueAt(rows[i], 0).toString());
                deleteToernooi(id);
            }
        }
    }//GEN-LAST:event_deleteToernooiBtnMouseClicked

    /**
     * Maakt een tafel indeling van een geselecteerd toernooi.
     * Controleert of er 1 toernooi is geselecteerd.
     * Dialog voor bevestiging keuze.
     * @param evt 
     */
    private void tafelBtnMouseClicked (java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tafelBtnMouseClicked
        int[] rows = toernooiTable.getSelectedRows();
        if (rows.length == 0) {
            JOptionPane.showMessageDialog(this, "Geen toernooi geselecteerd.", "Genereer tafelindeling", JOptionPane.PLAIN_MESSAGE);
        }
        else if (rows.length > 1) {
            JOptionPane.showMessageDialog(this, "<html>Meerdere toernooien geselecteerd.<br>"
                    + "Selecteer één toernooi.</html>", "Genereer tafelindeling", JOptionPane.PLAIN_MESSAGE);
        }
        else {
            int confirm = JOptionPane.showConfirmDialog(null, "<html>Weet u zeker dat u de tafelindeling voor dit toernooi wilt aanmaken?<br>"
                    + "Nadat de tafelindeling is aangemaakt is het niet meer mogelijk nieuwe spelers in te schrijven.</html>", "Genereer tafelindeling?", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                for (int i = 0; i < rows.length; i++) {
                    int id = Integer.parseInt(toernooiTable.getValueAt(rows[i], 0).toString());
                    genereerTafelIndeling(id);
                }
            }
        }
    }//GEN-LAST:event_tafelBtnMouseClicked

    /**
     * Opent dialog voor het bekijken van de inschrijvingen van een geselecteerd toernooi.
     * @param evt 
     */
    private void viewInschrijvingenBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewInschrijvingenBtnMouseClicked
        int[] row = toernooiTable.getSelectedRows();
        if (row.length == 0) {
            JOptionPane.showMessageDialog(this, "Geen toernooi(en) geselecteerd.", "Genereer tafelindeling", JOptionPane.PLAIN_MESSAGE);
        }
        else {
            for (int i = 0; i < row.length; i++) {
                int evenementID = Integer.parseInt(toernooiTable.getValueAt(row[i], 0).toString());
                BekijkToernooiInschrijving toernooiInschrijving = new BekijkToernooiInschrijving(evenementID);
                toernooiInschrijving.setLocation(200 + i*30, 150 + i*30 - (i/5)*150);
                toernooiInschrijving.setVisible(true);
            }
        }
    }//GEN-LAST:event_viewInschrijvingenBtnMouseClicked

    /**
     * Haalt toernooien op uit de database.
     */
    public final void getToernooien () {
        String query = "SELECT *, COUNT(Inschrijving.evenementID) AS inschrijvingen FROM Evenement "
                + "JOIN Locatie ON Evenement.locatieID = Locatie.locatieID "
                + "JOIN Toernooi ON Evenement.evenementID = Toernooi.evenementID "
                + "JOIN ToernooiSoort ON Toernooi.soortToernooi = ToernooiSoort.soortID "
                + "LEFT OUTER JOIN Inschrijving ON Evenement.evenementID = Inschrijving.evenementID "
                + "WHERE Toernooi.isGespeeld = false "
                + "GROUP BY Evenement.evenementID;";
        try {
            Connection conn = SimpleDataSource.getConnection();
            PreparedStatement stat = conn.prepareStatement(query);
            ResultSet result = stat.executeQuery();
            fillTable(result);
            result.close();
            stat.close();
        }
        catch (Exception e) {
            FullHouse.showDBError(e);
        }
    }
    
    /**
     * Vult de tabel met toernooien.
     * @param result
     * @throws SQLException 
     */
    private void fillTable(ResultSet result) throws SQLException {
        String[] columnNames = {"ID", "Naam", "Locatie", "Datum", "Soort", "Prijs", "Max. spelers", "Min. spelers", "Aantal Inschrijvingen"};
        DefaultTableModel model = new TableModel();
        model.setDataVector(new Object[][]{}, columnNames);
        while (result.next()) {
            String ID = result.getString("Evenement.evenementID");
            ID = FullHouse.addZeroes(ID, 4);
            String naam = result.getString("Evenement.naam");
            int locatieID = result.getInt("Evenement.locatieID");
            String locatieNaam = result.getString("Locatie.naam");
            ModelItem locatie = new ModelItem(locatieID, locatieNaam);
            String datum = result.getString("Evenement.datum");
            int soortID = result.getInt("Toernooi.soortToernooi");
            String soortBeschrijving = result.getString("ToernooiSoort.beschrijving");
            ModelItem soort = new ModelItem(soortID, soortBeschrijving);
            int prijs = result.getInt("Evenement.prijs");
            int maxSpelers = result.getInt("Toernooi.maximumSpelers");
            int minSpelers = result.getInt("Toernooi.minimumSpelers");
            int inschrijvingen = result.getInt("inschrijvingen");
            Object[] rowData = {ID, naam, locatie, datum, soort, prijs, maxSpelers, minSpelers, inschrijvingen};
            model.addRow(rowData);
        }
        toernooiTable.setModel(model);
        result.close();
    }
    
    /**
     * Verwijdert een toernooi uit de database.
     * @param id 
     */
    private void deleteToernooi (int id) {
        String query = "DELETE FROM Toernooi WHERE evenementID = ?;";
        String query2 = "DELETE FROM Evenement WHERE evenementID = ?;";
        try {
            Connection conn = SimpleDataSource.getConnection();
            PreparedStatement stat = conn.prepareStatement(query);
            PreparedStatement stat2 = conn.prepareStatement(query2);
            
            stat.setInt(1, id);
            stat2.setInt(1, id);
            
            stat.executeUpdate();
            stat2.executeUpdate();
            
            stat.close();
            stat2.close();
        }
        catch (Exception e) {
            FullHouse.showDBError(e);
        }
        
        getToernooien();
    }
    
    /**
     * Maakt een tafelindeling aan.
     * @param toernooiID
     * @return returns true wanneer de indeling is gemaakt.
     */
    private boolean genereerTafelIndeling (int toernooiID) {
        String query = "SELECT spelerID FROM Inschrijving WHERE evenementID = ?;";
        String query2 = "SELECT spelersPerTafel FROM Evenement "
                + "JOIN Locatie ON Evenement.locatieID = Locatie.locatieID "
                + "WHERE evenementID = ?;";
        String query3 = "INSERT INTO ToernooiInschrijving(evenementID, spelerID, tafelNr, isUitgeschakeld) "
                + "VALUES(?, ?, ?, false);";
        String query4 = "UPDATE Toernooi SET isGesloten = true WHERE evenementID = ?;";
        try {
            Connection conn = SimpleDataSource.getConnection();
            PreparedStatement stat = conn.prepareStatement(query);
            PreparedStatement stat2 = conn.prepareStatement(query2);
            
            stat.setInt(1, toernooiID);
            stat2.setInt(1, toernooiID);
            
            ResultSet result = stat.executeQuery();
            ResultSet result2 = stat2.executeQuery();
            
            ArrayList<Integer> spelers = new ArrayList<>();
            while (result.next()) {
                int spelerID = result.getInt("spelerID");
                spelers.add(spelerID);
            }
            
            result2.next();
            int stoelen = result2.getInt("spelersPerTafel");
            int tafels = spelers.size() / stoelen;
            if (spelers.size() % stoelen != 0) {
                tafels ++;
            }
            int[][] indeling = new int[tafels][stoelen];
            
            result.close();
            result2.close();
            stat.close();
            stat2.close();
            
            for (int i = 0; i < spelers.size(); i++) {
                int speler = spelers.get(i);
                int tafel = (int) (Math.random() * tafels);
                int stoel = (int) (Math.random() * stoelen);
                if (indeling[tafel][stoel] == 0) {
                    indeling[tafel][stoel] = speler;
                    PreparedStatement stat3 = conn.prepareStatement(query3);
                    stat3.setInt(1, toernooiID);
                    stat3.setInt(2, speler);
                    stat3.setInt(3, tafel+1);
                    stat3.executeUpdate();
                    stat3.close();
                }
                else {
                    i --;
                }
            }
            stat = conn.prepareStatement(query4);
            stat.setInt(1, toernooiID);
            stat.executeUpdate();
            stat.close();
        }
        catch (SQLException e) {
            FullHouse.showDBError(e);
            return false;
        }
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToernooiBtn;
    private javax.swing.JButton deleteToernooiBtn;
    private javax.swing.JButton editToernooiBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton tafelBtn;
    private javax.swing.JTable toernooiTable;
    private javax.swing.JButton viewInschrijvingenBtn;
    // End of variables declaration//GEN-END:variables
}
